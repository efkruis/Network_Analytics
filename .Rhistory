"Jelena", "Olga",
#Recievers of fourth sender
"Milena", "Vedran", "Sanja",
#Recievers of fifth sender
"Olga", "Vera",
#Recivers of sixth sender
"Olga", "Lazar", "Milan",
#Recievers of seventh sender
"Milena", "Nikola", "Vedran",
#Recivers of eigth sender
"Pavle", "Vedran", "Sanja"
)
)
team_net <- graph_from_data_frame(
team_collab,
directed = FALSE
)
### s
#setting up attributes
V(team_net)$status <-
c("R", "L", "R", "R", "U", "U", "R", "R", "L", "L", "L", "L")**.
V(team_net)$color <- V(team_net)$status
V(team_net)$color <- str_replace(V(team_net)$color, "R", "blue")
V(team_net)$color <- str_replace(V(team_net)$color, "L", "red")
V(team_net)$color <- str_replace(V(team_net)$color, "U", "gray")
#vertex positions
ver_pos <- cbind(
#x-coordinate
c(5, 25, 13, 1, 25, 5, 8, 20, 1, 15, 25, 13),
#y-coordinate
c(20, 1, 23, 13, 16, 3, 10, 20, 25, 2, 10, 8)
)
plot(
team_net,
edge.label = NA,
edge.color = "black",
layout = ver_pos,
vertex.label = V(team_net)$name,
vertex.label.color = "white",
vertex.color = V(team_net)$color,
vertex.size = 35
)
team_collab <- data.frame(
## senders
from = c(
# first sender
"Pavle", "Pavle", "Pavle",
# second sender
"Ana", "Ana",
# third sender
"Sanja", "Sanja",
# fourth sender
"Lazar", "Lazar", "Lazar",
# fifth sender
"Vedran", "Vedran",
# sixth sender
"Nikola", "Nikola", "Nikola",
# seventh sender
"Jelena", "Jelena", "Jelena",
# eighth sender
"Milena", "Milena", "Sanja"
),
to = c(
#Receivers of first sender
"Luka", "Sanja", "Nikola",
#Receivers of second sender
"Milan", "Vera",
#Recievers of third sender
"Jelena", "Olga",
#Recievers of fourth sender
"Milena", "Vedran", "Sanja",
#Recievers of fifth sender
"Olga", "Vera",
#Recivers of sixth sender
"Olga", "Lazar", "Milan",
#Recievers of seventh sender
"Milena", "Nikola", "Vedran",
#Recivers of eigth sender
"Pavle", "Vedran", "Sanja"
)
)
#converting data table
team_net <- graph_from_data_frame(
team_collab,
directed = FALSE
)
#setting up attributes
V(team_net)$status <-
c("R", "L", "R", "R", "U", "U", "R", "R", "L", "L", "L", "L")**.
V(team_net)$color <- V(team_net)$status
V(team_net)$color <- str_replace(V(team_net)$color, "R", "blue")
V(team_net)$color <- str_replace(V(team_net)$color, "L", "red")
V(team_net)$color <- str_replace(V(team_net)$color, "U", "gray")
#vertex positions
ver_pos <- cbind(
#x-coordinate
c(5, 25, 13, 1, 25, 5, 8, 20, 1, 15, 25, 13),
#y-coordinate
c(20, 1, 23, 13, 16, 3, 10, 20, 25, 2, 10, 8)
)
#plotting the network
plot(
team_net,
edge.label = NA,
edge.color = "black",
layout = ver_pos,
vertex.label = V(team_net)$name,
vertex.label.color = "white",
vertex.color = V(team_net)$color,
vertex.size = 35
)
team_collab <- data.frame(
## senders
from = c(
# first sender
"Pavle", "Pavle", "Pavle",
# second sender
"Ana", "Ana",
# third sender
"Sanja", "Sanja",
# fourth sender
"Lazar", "Lazar", "Lazar",
# fifth sender
"Vedran", "Vedran",
# sixth sender
"Nikola", "Nikola", "Nikola",
# seventh sender
"Jelena", "Jelena", "Jelena",
# eighth sender
"Milena", "Milena", "Sanja"
),
to = c(
#Receivers of first sender
"Luka", "Sanja", "Nikola",
#Receivers of second sender
"Milan", "Vera",
#Recievers of third sender
"Jelena", "Olga",
#Recievers of fourth sender
"Milena", "Vedran", "Sanja",
#Recievers of fifth sender
"Olga", "Vera",
#Recivers of sixth sender
"Olga", "Lazar", "Milan",
#Recievers of seventh sender
"Milena", "Nikola", "Vedran",
#Recivers of eigth sender
"Pavle", "Vedran", "Sanja"
)
)
#converting data table
team_net <- graph_from_data_frame(
team_collab,
directed = FALSE
)
#setting up attributes
V(team_net)$status <-
c("R", "L", "R", "R", "U", "U", "R", "R", "L", "L", "L", "L")**.
V(team_net)$color <- V(team_net)$status
V(team_net)$color <- str_replace(V(team_net)$color, "R", "blue")
V(team_net)$color <- str_replace(V(team_net)$color, "L", "red")
V(team_net)$color <- str_replace(V(team_net)$color, "U", "gray")
#vertex positions
ver_pos <- cbind(
#x-coordinate
c(5, 25, 13, 1, 25, 5, 8, 20, 1, 15, 25, 13),
#y-coordinate
c(20, 1, 23, 13, 16, 3, 10, 20, 25, 2, 10, 8)
)
#setting up attributes
V(team_net)$status <-
c("R", "L", "R", "R", "U", "U", "R", "R", "L", "L", "L", "L")
V(team_net)$color <- V(team_net)$status
V(team_net)$color <- str_replace(V(team_net)$color, "R", "blue")
V(team_net)$color <- str_replace(V(team_net)$color, "L", "red")
V(team_net)$color <- str_replace(V(team_net)$color, "U", "gray")
#vertex positions
ver_pos <- cbind(
#x-coordinate
c(5, 25, 13, 1, 25, 5, 8, 20, 1, 15, 25, 13),
#y-coordinate
c(20, 1, 23, 13, 16, 3, 10, 20, 25, 2, 10, 8)
)
#plotting the network
plot(
team_net,
edge.label = NA,
edge.color = "black",
layout = ver_pos,
vertex.label = V(team_net)$name,
vertex.label.color = "white",
vertex.color = V(team_net)$color,
vertex.size = 35
)
team_att <- as_long_data_frame(team_net)
#summarizing the sender notes
node_sender_summ <- team_att %>%
group_by(from_name) %>%
summarize(
collab_remain = sum(to_status == "R"),
collab_left = sum(to_status == "L"),
collab_unknown = sum(to_status == "U")
) %>%
rename(name = from_name)
node_summ <- node_sender_summ %>%
bind_rows(node_receiver_summ) %>%
group_by(name) %>%
summarize(
across(
.cols = everything(),
.fns = sum
),
.groups = "drop" ) %>%
mutate(
tot_known = collab_remain + collab_left,
remain_prob_known = collab_remain / tot_known
)
node_receiver_summ <- team_att %>%
group_by(to_name) %>%
summarize(
collab_remain = sum(from_status == "R"),
collab_left = sum(from_status == "L"),
collab_unknown = sum(from_status == "U") ) %>%
rename(name = to_name)
#
node_summ <- node_sender_summ %>%
bind_rows(node_receiver_summ) %>%
group_by(name) %>%
summarize(
across(
.cols = everything(),
.fns = sum
),
.groups = "drop" ) %>%
mutate(
tot_known = collab_remain + collab_left,
remain_prob_known = collab_remain / tot_known
)
node_summ
plot(
team_net,
layout = ver_pos,
vertex.color = "gray",
vertex.size = 35
)
#extracting adjacency matrices
team_adj <- as_adjacency_matrix(team_net)
set.seed(1736)
remain_prob <- runif(12, 0, 1)
names(remain_prob) <- V(team_net)$name
remain_prob
for (ndx in 1:2) {
remain_prob <-
(team_adj %*% remain_prob /
degree(team_net) +
remain_prob) / 2
}
remain_prob
#updating node attributes
V(team_net)$status[5,6] <- "R"
#updating node attributes
V(team_net)$status[5] <- "R"
V(team_net)$status[6] <- "R"
V(team_net)$color[5] <- "blue"
V(team_net)$color[6] <- "blue"
#updating node attributes
V(team_net)$status[c(5,6)] <- "R"
V(team_net)$color[c(5,6)] <- "blue"
#adding edge lables
E(team_net)$label <-
c(
re
"RL", "RR", "RR", "LL", "LL", "RR", "RL",
"RR", "RR", "RR", "RL", "RL", "RL", "RR",
"RL", "RR", "RR", "RR", "RR", "RR", "RR"
)
#adding edge lables
E(team_net)$label <-
c(
"RL", "RR", "RR", "LL", "LL", "RR", "RL",
"RR", "RR", "RR", "RL", "RL", "RL", "RR",
"RL", "RR", "RR", "RR", "RR", "RR", "RR"
)
#set color attribute
E(team_net)$color <- E(team_net)$label
#adding edge lables
E(team_net)$label <-
c(
rep("RR", 7),
"RL", "RR", "RR", "LL", "LL", "RR", "RL",
"RR", "RR", "RR", "RL", "RL", "RL", "RR",
"RL", "RR", "RR", "RR", "RR", "RR", "RR",
rep("LL", 5)
)
#adding edge lables
E(team_net)$label <-
c(
"RL", "RR", "RR", "LL", "LL", "RR", "RL",
"RR", "RR", "RR", "RL", "RL", "RL", "RR",
"RL", "RR", "RR", "RR", "RR", "RR", "RR",
)
#adding edge lables
E(team_net)$label <-
c(
"RL", "RR", "RR", "LL", "LL", "RR", "RL",
"RR", "RR", "RR", "RL", "RL", "RL", "RR",
"RL", "RR", "RR", "RR", "RR", "RR", "RR",
)
#set color attribute
E(team_net)$color <- E(team_net)$label
#updating node attributes
V(team_net)$status[c(5,6)] <- "R"
V(team_net)$color[c(5,6)] <- "blue"
#adding edge lables
E(team_net)$label <-
c(
"RL", "RR", "RR", "LL", "LL", "RR", "RL",
"RR", "RR", "RR", "RL", "RL", "RL", "RR",
"RL", "RR", "RR", "RR", "RR", "RR", "RR",
)
#adding edge lables
E(team_net)$label <-
c(
"RL", "RR", "RR", "LL", "LL", "RR", "RL",
"RR", "RR", "RR", "RL", "RL", "RL", "RR",
"RL", "RR", "RR", "RR", "RR", "RR", "RR"
)
#set color attribute
E(team_net)$color <- E(team_net)$label
E(team_net)$color <- E(team_net)$label
#alter for remain
E(team_net)$color <- str_replace(E(team_net)$color, "RR", "blue")
#alter for left
E(team_net)$color <- str_replace(E(team_net)$color, "LL", "red")
#alter for unknown
E(team_net)$color <- str_replace(E(team_net)$color, "RL", "purple")
#plot updated collaboration network
plot(
team_net,
layout = ver_pos,
vertex.size = 35,
vertex.label.color = "white",
edge.label = NA,
edge.width = 3
)
#plot updated collaboration network
plot(
team_net,
layout = ver_pos,
vertex.size = 35,
vertex.label.color = "black",
edge.label = NA,
edge.width = 3
)
#1
edge_density(team_net)
#2, dyadicity
sum(E(team_net)$label == "RR") /
(edge_density(team_net) *
(sum(V(team_net)$status == "R") * (sum(V(team_net)$status == "R") - 1) / 2))
#3, dyadicity of left nodes
sum(E(team_net)$label == "LL") /
(edge_density(team_net) *
(sum(V(team_net)$status == "L") * (sum(V(team_net)$status == "L") - 1) / 2))
#4, heterophilicity of network
sum(E(team_net)$label == "RL") /
(edge_density(team_net) *
sum(V(team_net)$status == "R") *
sum(V(team_net)$status == "L"))
#1, degree of nodes
degree(team_net)
#2, second-order neighborhood size excluding the focal node
neighborhood.size(team_net,order = 2) -1
#3, number of triangles
count_triangles(team_net)
#4, local transitivity
transitivity(team_net, type = "local")
#5 betweenness centrality
betweenness(team_net)
#6, closeness centrality
closeness(team_net)
#7, eigenvector centrality
eigen_centrality(team_net, scale = FALSE)
#8, PageRank
page_rank(team_net, damping = 0.9, personalized = NULL)
#the remaining nodes
team_adj %*%
as.numeric(V(team_net)$status == "R")
#the neighbors who left
team_adj %*%
as.numeric(V(team_net)$status == "L")
e
load(
here("data", "employee_net.rdata") )
glimpse(nodes)
load(
here("data", "employee_net(1).rdata") )
a
load(
here("data", "employee_net(1).rdata") )
load("~/Library/Mobile Documents/com~apple~CloudDocs/year_2/WQ21/mgt_592/assignments/Network_Analytics/Data/employee_net.rdata")
glimpse(nodes)
glimpse(edges)
employee_tg <- tbl_graph(
nodes = nodes,
edges = edges,
directed = FALSE,
node_key = "id"
)
#create data table
employee_tg <- employee_tg %>%
## activate nodes
activate(nodes) %>% ## add variable mutate(
17
# add edge id
edge_id = row_number() ) %>%
## activate edges
activate(edges) %>% ## add variable mutate(
# edge color by churn mix
churn_type = case_when(
#create data table
employee_tg <- employee_tg %>%
## activate nodes
activate(nodes) %>%
mutate(
edge_id = row_number()
) %>%
activate(edges) %>%
mutate(
churn_type = case_when(
.N()$churn[from] == "Yes" & .N()$churn[to] == "Yes" ~ "cc",
.N()$churn[from] == "No" & .N()$churn[to] == "No" ~ "ss",
.N()$churn[from] == "Yes" & .N()$churn[to] == "No" ~ "cs",
.N()$churn[from] == "No" & .N()$churn[to] == "Yes" ~ "cs"
)
)
2+2
#creating a table graph
employee_tg <- tbl_graph(
nodes = nodes,
edges = edges,
directed = FALSE,
node_key = "id"
)
#create data table
employee_tg <- employee_tg %>%
## activate nodes
activate(nodes) %>%
mutate(
edge_id = row_number()
) %>%
activate(edges) %>%
mutate(
churn_type = case_when(
.N()$churn[from] == "Yes" & .N()$churn[to] == "Yes" ~ "cc",
.N()$churn[from] == "No" & .N()$churn[to] == "No" ~ "ss",
.N()$churn[from] == "Yes" & .N()$churn[to] == "No" ~ "cs",
.N()$churn[from] == "No" & .N()$churn[to] == "Yes" ~ "cs"
)
)
## print
employee_tg
set.seed(1736)
employee_nodes_samp <-employee_tg %>%
activate(nodes) %>%
as_tibble() %>%
mutate(
id = NULL,
edge_id = as.character(edge_id)
) %>%
slice_sample(n = 70)
#Sample edges
employee_edges_samp <- employee_tg %>%
activate(edges) %>%
as_tibble() %>%
mutate(
from = as.character(from),
to = as.character(to)
) %>%
filter(
from %in% employee_nodes_samp$edge_id,
to %in% employee_nodes_samp$edge_id
)
#create table
employee_tg_samp <- tbl_graph(
nodes = employee_nodes_samp,
edges = employee_edges_samp,
directed = FALSE,
node_key = "edge_id"
)
employee_tg_samp
#call netwrok plot
employee_net_samp_plot <- ggraph(
employee_tg_samp,
layout = "kk" )+
geom_edge_diagonal(aes(color = churn_type), alpha = 0.25, width = 1) +
geom_node_point(aes(color = churn), size = 3) +
scale_color_manual(values = c("darkred", "darkgreen")) +
scale_edge_color_manual(values = c("red", "orange", "green")) +
theme(legend.position = "bottom")
employee_net_samp_plot
employee_net_samp_facet_plot <- ggraph(
employee_tg_samp,
layout = "kk"
)+
geom_edge_diagonal(aes(color = churn_type), alpha = 0.25, width = 1) +
geom_node_point(aes(color = churn), size = 3) +
scale_color_manual(values = c("darkred", "darkgreen")) +
scale_edge_color_manual(values = c("red", "orange", "green")) +
facet_edges(~ churn_type) +
theme(legend.position = "bottom")
employee_net_samp_facet_plot
